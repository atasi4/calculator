{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","currentSum","setCurrentSum","clear","setClear","useEffect","document","querySelector","value","className","type","id","readOnly","placeholder","onClick","e","preventDefault","currentNum","sum","parseInt","console","log","reset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kPAkDeA,MA/Cf,WAAgB,IAAD,EACoBC,mBAAS,GAD7B,mBACNC,EADM,KACKC,EADL,OAEWF,oBAAS,GAFpB,mBAENG,EAFM,KAECC,EAFD,KAgCZ,OA7BDC,qBAAU,WACTC,SAASC,cAAc,WAAWC,MAAM,KAEvC,IACFH,qBAAU,WACLF,IACHG,SAASC,cAAc,WAAWC,MAAM,OAwBxC,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,uDAEF,8BACM,2BAAOC,KAAK,OAAOC,GAAG,SAASH,MAAOP,EAAaW,UAAQ,IAC3D,2BAAOF,KAAK,OAAOC,GAAG,MAAME,YAAY,mBACxC,4BAAQC,QA5BP,SAACC,GACTA,EAAEC,iBACCb,GAAOC,GAAS,GACnB,IAAIa,EAAWX,SAASC,cAAc,QAAQC,MAC9C,GAAe,IAAZS,EAAH,CAEA,IAAIC,EAAKjB,EAAWkB,SAASF,GAC7Bf,EAAcgB,GACdZ,SAASC,cAAc,QAAQC,MAAM,MAoB9B,OACA,4BAAQM,QAjBL,SAACC,GACXA,EAAEC,iBACFI,QAAQC,IAAI,OAAQpB,GACpBK,SAASC,cAAc,QAAQe,QAC/BlB,GAAS,GACTF,EAAc,KAYP,YChCQqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.7a8dcc8f.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [currentSum,setCurrentSum]=useState(0);\n  const [clear ,setClear]=useState(false);\n  useEffect(()=>{\n   document.querySelector('#result').value=\"\";\n\n  },[])\n  useEffect(()=>{\n    if(clear)\n    document.querySelector('#result').value=\"\";\n \n   },)\n   const Add=(e)=>{\n     e.preventDefault();\n     if(clear) setClear(false);\n     let currentNum=document.querySelector('#num').value\n     if(currentNum=='')\n     return;\n     let sum= currentSum+parseInt(currentNum);\n     setCurrentSum(sum);\n     document.querySelector('#num').value=\"\";\n       \n   }\n \n   const Clear=(e)=>{\n     e.preventDefault();\n     console.log('sum:', currentSum);\n     document.querySelector('form').reset();\n     setClear(true);\n     setCurrentSum(0);\n   }\n   \n   return (\n    <div className=\"App\">\n      <div className=\"app-title\">\n        <h1> Basic Form Calculator</h1>\n      </div>\n      <form>\n            <input type=\"text\" id=\"result\" value={currentSum}  readOnly />   \n            <input type=\"text\" id=\"num\" placeholder=\"enter a number\" />\n            <button onClick={Add}>Add</button>\n            <button onClick={Clear}>Clear</button>\n      </form>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}